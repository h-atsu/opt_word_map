{"version":3,"sources":["components/Graph.js","App.js","index.js"],"names":["Graph","_ref","data","elements","flatMap","item","id","term","label","url","list_related_term","map","relatedTerm","concat","source","target","cyRef","React","useRef","handleNodeClick","event","window","open","_jsx","CytoscapeComponent","layout","name","randomize","nodeRepulsion","idealEdgeLength","nodeOverlap","padding","stylesheet","selector","style","shape","color","width","height","cy","current","on","App","children","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uMA6FeA,MA1Ff,SAAcC,GAAY,IAAX,KAAEC,GAAMD,EACnB,MAAME,EAAWD,EAAKE,SAAQC,GAAQ,CAClC,CACIH,KAAM,CACFI,GAAID,EAAKE,KACTC,MAAOH,EAAKE,KACZE,IAAKJ,EAAKI,SAGfJ,EAAKK,kBAAkBC,KAAIC,IAAW,CACrCV,KAAM,CACFI,GAAG,GAADO,OAAKR,EAAKE,KAAI,KAAAM,OAAID,GACpBE,OAAQT,EAAKE,KACbQ,OAAQH,UAqDdI,EAAQC,IAAMC,OAAO,MAErBC,EAAmBC,IACrB,MACMX,EADOW,EAAML,OACFb,KAAK,OAClBO,GACAY,OAAOC,KAAKb,EAAK,SACrB,EAGJ,OACIc,cAACC,IAAkB,CACfrB,SAAUA,EACVsB,OA7DO,CACXC,KAAM,OACNC,WAAW,EACXC,cAAe,IACfC,gBAAiB,IACjBC,YAAa,GACbC,QAAS,IAwDLC,WArDW,CACf,CACIC,SAAU,OACVC,MAAO,CACH,mBAAoB,UACpBC,MAAO,kBACP,MAAS,cACT,cAAe,SACf,cAAe,SACf,YAAa,OACb,MAAS,QACT,OAAU,QACV,QAAW,OACX,YAAa,OACb,iBAAkB,UAG1B,CACIF,SAAU,cACVC,MAAO,CACL1B,MAAO,cACP,YAAa,KACb4B,MAAO,QACP,cAAe,SACf,cAAe,WAGrB,CACIH,SAAU,OACVC,MAAO,CACH,MAAS,EACT,cAAe,SACf,aAAc,OACd,qBAAsB,WACtB,qBAAsB,UAoB1BA,MAAO,CAAEG,MAAO,OAAQC,OAAQ,QAChCC,GAAKA,IACDvB,EAAMwB,QAAUD,EAChBA,EAAGE,GAAG,MAAO,OAAQtB,EAAgB,GAIrD,E,OC/EeuB,MARf,WACI,OACInB,cAAA,OAAKW,MAAO,CAAEG,MAAO,QAASC,OAAQ,SAAUK,SAC5CpB,cAACvB,EAAK,CAACE,KAAMA,KAGzB,ECNA0C,IAASC,OACLtB,cAACN,IAAM6B,WAAU,CAAAH,SACbpB,cAACmB,EAAG,MAERK,SAASC,eAAe,Q","file":"static/js/main.5ec80217.chunk.js","sourcesContent":["import React from 'react';\nimport CytoscapeComponent from 'react-cytoscapejs';\n\nfunction Graph({ data }) {\n    const elements = data.flatMap(item => [\n        { \n            data: { \n                id: item.term, \n                label: item.term,\n                url: item.url  // Add URL to node data\n            } \n        },\n        ...item.list_related_term.map(relatedTerm => ({\n            data: { \n                id: `${item.term}-${relatedTerm}`,\n                source: item.term, \n                target: relatedTerm \n            }\n        }))\n    ]);\n\n    const layout = {\n        name: 'cose',\n        randomize: true,\n        nodeRepulsion: 10000,\n        idealEdgeLength: 100,\n        nodeOverlap: 20,\n        padding: 30\n    };\n\n    const stylesheet = [\n        {\n            selector: 'node',\n            style: {\n                \"background-color\": \"#1976d2\",\n                shape: \"round-rectangle\",\n                'label': 'data(label)',\n                'text-valign': 'center',\n                'text-halign': 'center',\n                'font-size': '12px',\n                'width': 'label',\n                'height': 'label',\n                'padding': '10px',\n                'text-wrap': 'wrap',\n                'text-max-width': '100px'\n            }\n        },\n        {\n            selector: \"node[label]\",\n            style: {\n              label: \"data(label)\",\n              \"font-size\": \"12\",\n              color: \"white\",\n              \"text-halign\": \"center\",\n              \"text-valign\": \"center\",\n            },\n        },\n        {\n            selector: 'edge',\n            style: {\n                'width': 1,\n                'curve-style': 'bezier',\n                'line-color': '#ccc',\n                'target-arrow-shape': 'triangle',  // Add arrow for directed graph\n                'target-arrow-color': '#ccc'\n            }\n        }\n    ];\n\n    const cyRef = React.useRef(null);\n\n    const handleNodeClick = (event) => {\n        const node = event.target;\n        const url = node.data('url');\n        if (url) {\n            window.open(url, '_blank');\n        }\n    };\n\n    return (\n        <CytoscapeComponent\n            elements={elements}\n            layout={layout}\n            stylesheet={stylesheet}\n            style={{ width: '100%', height: '100%' }}\n            cy={(cy) => {\n                cyRef.current = cy;\n                cy.on('tap', 'node', handleNodeClick);\n            }}\n        />\n    );\n}\n\nexport default Graph;","import React from 'react';\nimport Graph from './components/Graph';\nimport data from './data/list_opt_term.json';\n\nfunction App() {\n    return (\n        <div style={{ width: '100vw', height: '100vh' }}>\n            <Graph data={data} />\n        </div>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}